import { IBaseConfig } from '../types';

function describeClassname(prop: string, description: string) {
  return `# ${prop}\n${description}\n[Mozilla Developer Network: ${prop}](https://developer.mozilla.org/en-US/docs/Web/CSS/${prop}).`;
}

export const config: IBaseConfig<
  | 'breakpoints'
  | 'spacing'
  | 'colors'
  | 'borderWidths'
  | 'letterSpacing'
  | 'lineHeight'
  | 'borderRadius'
  | 'fontFamily'
  | 'boxShadows'
  | 'opacity'
  | 'durations'
  | 'timingFunctions'
  | 'fontSizes'
> = {
  tokens: {
    breakpoints: {
      SM: '640px',
      MD: '768px',
      LG: '1024px',
      XL: '1280px',
    },
    spacing: {
      PX: '1px',
      NONE: '0',
      SPACING_01: '0.25rem',
      SPACING_02: '0.5rem',
      SPACING_03: '0.75rem',
      SPACING_04: '1rem',
      SPACING_05: '1.25rem',
      SPACING_06: '1.5rem',
      SPACING_08: '2rem',
      SPACING_10: '2.5rem',
      SPACING_12: '3rem',
      SPACING_16: '4rem',
      SPACING_20: '5rem',
      SPACING_24: '6rem',
      SPACING_32: '8rem',
      SPACING_40: '10rem',
      SPACING_48: '12rem',
      SPACING_56: '14rem',
      SPACING_64: '16rem',
    },
    colors: {
      TRANSPARENT: 'transparent',
      BLACK: '#000',
      WHITE: '#fff',
      GRAY_100: '#f7fafc',
      GRAY_200: '#edf2f7',
      GRAY_300: '#e2e8f0',
      GRAY_400: '#cbd5e0',
      GRAY_500: '#a0aec0',
      GRAY_600: '#718096',
      GRAY_700: '#4a5568',
      GRAY_800: '#2d3748',
      GRAY_900: '#1a202c',
      RED_100: '#fff5f5',
      RED_200: '#fed7d7',
      RED_300: '#feb2b2',
      RED_400: '#fc8181',
      RED_500: '#f56565',
      RED_600: '#e53e3e',
      RED_700: '#c53030',
      RED_800: '#9b2c2c',
      RED_900: '#742a2a',
      ORANGE_100: '#fffaf0',
      ORANGE_200: '#feebc8',
      ORANGE_300: '#fbd38d',
      ORANGE_400: '#f6ad55',
      ORANGE_500: '#ed8936',
      ORANGE_600: '#dd6b20',
      ORANGE_700: '#c05621',
      ORANGE_800: '#9c4221',
      ORANGE_900: '#7b341e',
      YELLOW_100: '#fffff0',
      YELLOW_200: '#fefcbf',
      YELLOW_300: '#faf089',
      YELLOW_400: '#f6e05e',
      YELLOW_500: '#ecc94b',
      YELLOW_600: '#d69e2e',
      YELLOW_700: '#b7791f',
      YELLOW_800: '#975a16',
      YELLOW_900: '#744210',
      GREEN_100: '#f0fff4',
      GREEN_200: '#c6f6d5',
      GREEN_300: '#9ae6b4',
      GREEN_400: '#68d391',
      GREEN_500: '#48bb78',
      GREEN_600: '#38a169',
      GREEN_700: '#2f855a',
      GREEN_800: '#276749',
      GREEN_900: '#22543d',
      TEAL_100: '#e6fffa',
      TEAL_200: '#b2f5ea',
      TEAL_300: '#81e6d9',
      TEAL_400: '#4fd1c5',
      TEAL_500: '#38b2ac',
      TEAL_600: '#319795',
      TEAL_700: '#2c7a7b',
      TEAL_800: '#285e61',
      TEAL_900: '#234e52',
      BLUE_100: '#ebf8ff',
      BLUE_200: '#bee3f8',
      BLUE_300: '#90cdf4',
      BLUE_400: '#63b3ed',
      BLUE_500: '#4299e1',
      BLUE_600: '#3182ce',
      BLUE_700: '#2b6cb0',
      BLUE_800: '#2c5282',
      BLUE_900: '#2a4365',
      INDIGO_100: '#ebf4ff',
      INDIGO_200: '#c3dafe',
      INDIGO_300: '#a3bffa',
      INDIGO_400: '#7f9cf5',
      INDIGO_500: '#667eea',
      INDIGO_600: '#5a67d8',
      INDIGO_700: '#4c51bf',
      INDIGO_800: '#434190',
      INDIGO_900: '#3c366b',
      PURPLE_100: '#faf5ff',
      PURPLE_200: '#e9d8fd',
      PURPLE_300: '#d6bcfa',
      PURPLE_400: '#b794f4',
      PURPLE_500: '#9f7aea',
      PURPLE_600: '#805ad5',
      PURPLE_700: '#6b46c1',
      PURPLE_800: '#553c9a',
      PURPLE_900: '#44337a',
      PINK_100: '#fff5f7',
      PINK_200: '#fed7e2',
      PINK_300: '#fbb6ce',
      PINK_400: '#f687b3',
      PINK_500: '#ed64a6',
      PINK_600: '#d53f8c',
      PINK_700: '#b83280',
      PINK_800: '#97266d',
      PINK_900: '#702459',
    },
    fontFamily: {
      SANS: `${[
        'Inter',
        'apple-system',
        'BlinkMacSystemFont',
        '"Segoe UI"',
        'Roboto',
        '"Helvetica Neue"',
        'Arial',
        '"Noto Sans"',
        'sans-serif',
        '"Apple Color Emoji"',
        '"Segoe UI Emoji"',
        '"Segoe UI Symbol"',
        '"Noto Color Emoji"',
      ].join(', ')}`,
      SERIF: `${['Georgia', 'Cambria', '"Times New Roman"', 'Times', 'serif'].join(',')}`,
      MONO: `${['Menlo', 'Monaco', 'Consolas', '"Liberation Mono"', '"Courier New"', 'monospace'].join(',')}`,
    },
    borderWidths: {
      NONE: '0',
      WIDTH_1: '1px',
      WIDTH_2: '2px',
      WIDTH_4: '4px',
      WIDTH_8: '8px',
    },
    letterSpacing: {
      TIGHTER: '-0.05em',
      TIGHT: '-0.025em',
      NORMAL: '0',
      WIDE: '0.025em',
      WIDER: '0.05em',
      WIDEST: '0.1em',
    },
    borderRadius: {
      NONE: '0',
      SM: '.125rem',
      MD: '.25rem',
      LG: '.5rem',
      FULL: '9999px',
    },
    lineHeight: {
      NONE: '1',
      TIGHT: '1.25',
      SNUG: '1.375',
      NORMAL: '1.5',
      RELAXED: '1.625',
      LOOSE: '2',
    },
    boxShadows: {
      XS: '0 0 0 1px rgba(0, 0, 0, 0.05)',
      SM: '0 1px 2px 0 rgba(0, 0, 0, 0.05)',
      MD: '0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06)',
      LG: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)',
      XL: '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)',
      XL_2: '0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)',
      XL_3: '0 25px 50px -12px rgba(0, 0, 0, 0.25)',
      INNER: 'inset 0 2px 4px 0 rgba(0, 0, 0, 0.06)',
      OUTLINE: '0 0 0 3px rgba(66, 153, 225, 0.5)',
      NONE: 'none',
    },
    opacity: {
      NONE: '0',
      OPACITY_25: '0.25',
      OPACITY_50: '0.5',
      OPACITY_75: '0.75',
      FULL: '1',
    },
    durations: {
      MS_75: '75ms',
      MS_100: '100ms',
      MS_150: '150ms',
      MS_200: '200ms',
      MS_300: '300ms',
      MS_500: '500ms',
      MS_700: '700ms',
      MS_1000: '1000ms',
    },
    timingFunctions: {
      LINEAR: 'linear',
      IN: 'cubic-bezier(0.4, 0, 1, 1)',
      OUT: 'cubic-bezier(0, 0, 0.2, 1)',
      IN_OUT: 'cubic-bezier(0.4, 0, 0.2, 1)',
    },
    fontSizes: {
      XS: '0.75rem',
      SM: '0.875rem',
      BASE: '1rem',
      LG: '1.125rem',
      XL: '1.25rem',
      XL_2: '1.5rem',
      XL_3: '1.875rem',
      XL_4: '2.25rem',
      XL_5: '3rem',
      XL_6: '4rem',
    },
  },
  screens: {
    sm: (css, { breakpoints }) => `@media (max-width: ${breakpoints.SM}) {${css}}`,
    md: (css, { breakpoints }) => `@media (max-width: ${breakpoints.MD}) {${css}}`,
    lg: (css, { breakpoints }) => `@media (max-width: ${breakpoints.LG}) {${css}}`,
    xl: (css, { breakpoints }) => `@media (max-width: ${breakpoints.XL}) {${css}}`,
  },
  classnames: {
    boxSizing: {
      tokens: {
        CONTENT_BOX: 'content-box',
        BORDER_BOX: 'border-box',
      },
      css: (name, value) => `${name} {\n  box-sizing: ${value};\n}`,
      description: describeClassname('box-sizing', 'Sets how the total width and height of an element is calculated.'),
    },
    display: {
      tokens: {
        BLOCK: 'block',
        INLINE_BLOCK: 'inline-block',
        INLINE: 'inline',
        INLINE_FLEX: 'inline-flex',
        TABLE: 'table',
        TABLE_ROW: 'table-row',
        TABLE_CELL: 'table-cell',
        GRID: 'grid',
        FLEX: 'flex',
        HIDDEN: 'none',
      },
      css: (name, value) => `${name} {\n  display: ${value};\n}`,
    },
    tableLayout: {
      tokens: {
        AUTO: 'auto',
        FIXED: 'fixed',
      },
      css: (name, value) => `${name} {\n  table-layout: ${value};\n}`,
    },
    position: {
      tokens: {
        STATIC: 'static',
        FIXED: 'fixed',
        ABSOLUTE: 'absolute',
        RELATIVE: 'relative',
        STICKY: 'sticky',
      },
      css: (name, value) => `${name} {\n  position: ${value};\n}`,
    },
    backgroundAttachment: {
      tokens: {
        FIXED: 'fixed',
        LOCAL: 'local',
        SCROLL: 'scroll',
      },
      css: (name, value) => `${name} {\n  background-attachment: ${value};\n}`,
    },
    backgroundColor: {
      tokens: ({ colors }) => colors,
      css: (name, value) => `${name} {\n  background-color: ${value};\n}`,
    },
    backgroundPosition: {
      tokens: {
        BOTTOM: 'bottom',
        CENTER: 'center',
        LEFT: 'left',
        LEFT_BOTTOM: 'left bottom',
        LEFT_TOP: 'left top',
        RIGHT: 'right',
        RIGHT_BOTTOM: 'right bottom',
        RIGHT_TOP: 'right top',
        TOP: 'top',
      },
      css: (name, value) => `${name} {\n  background-position: ${value};\n}`,
    },
    backgroundRepeat: {
      tokens: {
        REPEAT: 'background-repeat:repeat',
        NO_REPEAT: 'background-repeat:no-repeat',
        REPEAT_X: 'background-repeat:repeat-x',
        REPEAT_Y: 'background-repeat:repeat-y',
        REPEAT_ROUND: 'background-repeat:repeat-round',
        REPEAT_SPACE: 'background-repeat:repeat-space',
      },
      css: (name, value) => `${name} {\n  background-repeat: ${value};\n}`,
    },
    backgroundSize: {
      tokens: {
        AUTO: 'auto',
        COVER: 'cover',
        CONTAIN: 'contain',
      },
      css: (name, value) => `${name} {\n  background-size: ${value};\n}`,
    },
    borderRadius: {
      tokens: ({ borderRadius }) => borderRadius,
      css: (name, value) => `${name} {\n  border-radius: ${value};\n}`,
    },
    borderTopLeftRadius: {
      tokens: ({ borderRadius }) => borderRadius,
      css: (name, value) => `${name} {\n  border-top-left-radius: ${value};\n}`,
    },
    borderTopRightRadius: {
      tokens: ({ borderRadius }) => borderRadius,
      css: (name, value) => `${name} {\n  border-top-right-radius: ${value};\n}`,
    },
    borderBottomRightRadius: {
      tokens: ({ borderRadius }) => borderRadius,
      css: (name, value) => `${name} {\n  border-bottom-right-radius: ${value};\n}`,
    },
    borderBottomLeftRadius: {
      tokens: ({ borderRadius }) => borderRadius,
      css: (name, value) => `${name} {\n  border-bottom-left-radius: ${value};\n}`,
    },
    borderColor: {
      tokens: ({ colors }) => colors,
      css: ['borderTopColor', 'borderRightColor', 'borderBottomColor', 'borderLeftColor'],
    },
    borderTopColor: {
      tokens: ({ colors }) => colors,
      css: (name, value) => `${name} {\n  border-top-color: ${value};\n}`,
    },
    borderRightColor: {
      tokens: ({ colors }) => colors,
      css: (name, value) => `${name} {\n  border-right-color: ${value};\n}`,
    },
    borderBottomColor: {
      tokens: ({ colors }) => colors,
      css: (name, value) => `${name} {\n  border-bottom-color: ${value};\n}`,
    },
    borderLeftColor: {
      tokens: ({ colors }) => colors,
      css: (name, value) => `${name} {\n  border-left-color: ${value};\n}`,
    },
    borderWidth: {
      tokens: ({ borderWidths }) => borderWidths,
      css: ['borderTopWidth', 'borderRightWidth', 'borderBottomWidth', 'borderLeftWidth'],
    },
    borderTopWidth: {
      tokens: ({ borderWidths }) => borderWidths,
      css: (name, value) => `${name} {\n  border-top-width: ${value};\n}`,
    },
    borderRightWidth: {
      tokens: ({ borderWidths }) => borderWidths,
      css: (name, value) => `${name} {\n  border-right-width: ${value};\n}`,
    },
    borderBottomWidth: {
      tokens: ({ borderWidths }) => borderWidths,
      css: (name, value) => `${name} {\n  border-bottom-width: ${value};\n}`,
    },
    borderLeftWidth: {
      tokens: ({ borderWidths }) => borderWidths,
      css: (name, value) => `${name} {\n  border-left-width: ${value};\n}`,
    },
    borderStyle: {
      tokens: {
        SOLID: 'solid',
        DASHED: 'dashed',
        DOTTED: 'dotted',
        DOUBLE: 'double',
        NONE: 'none',
      },
      css: ['borderTopStyle', 'borderRightStyle', 'borderBottomStyle', 'borderLeftStyle'],
    },
    borderTopStyle: {
      tokens: {
        SOLID: 'solid',
        DASHED: 'dashed',
        DOTTED: 'dotted',
        DOUBLE: 'double',
        NONE: 'none',
      },
      css: (name, value) => `${name} {\n  border-top-style: ${value};\n}`,
    },
    borderRightStyle: {
      tokens: {
        SOLID: 'solid',
        DASHED: 'dashed',
        DOTTED: 'dotted',
        DOUBLE: 'double',
        NONE: 'none',
      },
      css: (name, value) => `${name} {\n  border-right-style: ${value};\n}`,
    },
    borderBottomStyle: {
      tokens: {
        SOLID: 'solid',
        DASHED: 'dashed',
        DOTTED: 'dotted',
        DOUBLE: 'double',
        NONE: 'none',
      },
      css: (name, value) => `${name} {\n  border-bottom-style: ${value};\n}`,
    },
    borderLeftStyle: {
      tokens: {
        SOLID: 'solid',
        DASHED: 'dashed',
        DOTTED: 'dotted',
        DOUBLE: 'double',
        NONE: 'none',
      },
      css: (name, value) => `${name} {\n  border-left-style: ${value};\n}`,
    },
    borderCollapse: {
      tokens: {
        COLLAPSE: 'collapse',
        SEPARATE: 'separate',
      },
      css: (name, value) => `${name} {\n  border-collapse: ${value};\n}`,
    },
    overflow: {
      tokens: {
        AUTO: 'auto',
        HIDDEN: 'hidden',
        VISIBLE: 'visible',
        SCROLL: 'scroll',
      },
      css: ['overflowX', 'overflowY'],
    },
    overflowX: {
      tokens: {
        AUTO: 'auto',
        HIDDEN: 'hidden',
        VISIBLE: 'visible',
        SCROLL: 'scroll',
      },
      css: (name, value) => `${name} {\n  overflow-x: ${value};\n}`,
    },
    overflowY: {
      tokens: {
        AUTO: 'auto',
        HIDDEN: 'hidden',
        VISIBLE: 'visible',
        SCROLL: 'scroll',
      },
      css: (name, value) => `${name} {\n  overflow-y: ${value};\n}`,
    },
    visibility: {
      tokens: {
        VISIBLE: 'visible',
        HIDDEN: 'hidden',
      },
      css: (name, value) => `${name} {\n  visibility: ${value};\n}`,
    },
    overflowScrolling: {
      tokens: {
        TOUCH: 'touch',
        AUTO: 'auto',
      },
      css: (name, value) => `${name} {\n  -webkit-overflow-scrolling: ${value};\n}`,
    },
    alignItems: {
      tokens: {
        STRETCH: 'stretch',
        START: 'flex-start',
        CENTER: 'center',
        END: 'flex-end',
        BASELINE: 'baseline',
      },
      css: (name, value) => `${name} {\n  align-items: ${value};\n}`,
    },
    flexDirection: {
      tokens: {
        ROW: 'row',
        ROW_REVERSE: 'row-reverse',
        COLUMN: 'column',
        COLUMN_REVERSE: 'column-reverse',
      },
      css: (name, value) => `${name} {\n  flex-direction: ${value};\n}`,
    },
    boxShadow: {
      tokens: ({ boxShadows }) => boxShadows,
      css: (name, value) => `${name} {\n  box-shadow: ${value};\n}`,
    },
    outline: {
      tokens: {
        NONE: '0',
      },
      css: (name, value) => `${name} {\n  outline: ${value};\n}`,
    },
    pointerEvents: {
      tokens: {
        NONE: 'none',
        AUTO: 'auto',
      },
      css: (name, value) => `${name} {\n  pointer-events: ${value}}`,
    },
    resize: {
      tokens: {
        BOTH: 'both',
        NONE: 'none',
        VERTICAL: 'vertical',
        HORIZONTAL: 'horizontal',
      },
      css: (name, value) => `${name} {\n  resize: ${value};\n}`,
    },
    userSelect: {
      tokens: {
        NONE: 'none',
        TEXT: 'text',
        ALL: 'all',
        AUTO: 'auto',
      },
      css: (name, value) => `${name} {\n  user-select: ${value};\n}`,
    },
    cursor: {
      tokens: {
        AUTO: 'auto',
        DEFAULT: 'default',
        POINTER: 'pointer',
        WAIT: 'wait',
        TEXT: 'text',
        MOVE: 'move',
        NOT_ALLOWED: 'not-allowed',
      },
      css: (name, value) => `${name} {\n  cursor: ${value};\n}`,
    },
    fill: {
      tokens: {
        CURRENT: 'currentColor',
      },
      css: (name, value) => `${name} {\n  fill: ${value};\n}`,
    },
    appearance: {
      tokens: {
        NONE: 'none',
      },
      css: (name, value) => `${name} {\n  appearance: ${value};\n}`,
    },
    fontWeight: {
      tokens: {
        HAIRLINE: '100',
        THIN: '200',
        LIGHT: '300',
        NORMAL: '400',
        MEDIUM: '500',
        SEMIBOLD: '600',
        BOLD: '700',
        EXTRABOLD: '800',
        BLACK: '900',
      },
      css: (name, value) => `${name} {\n  font-weight: ${value};\n}`,
    },
    fontFamily: {
      tokens: ({ fontFamily }) => fontFamily,
      css: (name, value) => `${name} {\n  font-family: ${value};\n}`,
    },
    color: {
      tokens: ({ colors }) => colors,
      css: (name, value) => `${name} {\n  color: ${value};\n}`,
      description: describeClassname(
        'color',
        "Sets the foreground color value of an element's text and text decorations, and sets the currentcolor value.",
      ),
    },
    textAlign: {
      tokens: {
        LEFT: 'left',
        CENTER: 'center',
        RIGHT: 'right',
        JUSTIFY: 'justify',
      },
      css: (name, value) => `${name} {\n  text-align: ${value};\n}`,
    },
    fontSize: {
      tokens: ({ fontSizes }) => fontSizes,
      css: (name, value) => `${name} {\n  font-size: ${value};\n}`,
    },
    textDecoration: {
      tokens: {
        UNDERLINE: 'underline',
        LINE_THROUGH: 'line-through',
        NONE: 'none',
      },
      css: (name, value) => `${name} {\n  text-decoration: ${value};\n}`,
    },
    fontSmoothing: {
      tokens: {
        ANTIALIASED: '-webkit-font-smoothing: antialiased;-moz-osx-font-smoothing: grayscale;',
        SUBPIXEL_ANTIALIASED: '-webkit-font-smoothing: auto;-moz-osx-font-smoothing: auto;',
      },
      css: (name, value) => `${name} {\n  ${value}\n}`,
    },
    fontStyle: {
      tokens: {
        ITALIC: 'italic',
        NORMAL: 'normal',
      },
      css: (name, value) => `${name} {\n  font-style: ${value};\n}`,
    },
    textTransform: {
      tokens: {
        UPPERCASE: 'uppercase',
        LOWERCASE: 'lowercase',
        CAPITALIZE: 'capitalize',
        NONE: 'none',
      },
      css: (name, value) => `${name} {\n  text-transform: ${value}}`,
    },
    verticalAlign: {
      tokens: {
        BASELINE: 'baseline',
        TOP: 'top',
        MIDDLE: 'middle',
        BOTTOM: 'bottom',
        TEXT_TOP: 'text-top',
        TEXT_BOTTOM: 'text-bottom',
      },
      css: (name, value) => `${name} {\n  vertical-align: ${value};\n}`,
    },
    height: {
      tokens: ({ spacing }) => ({
        AUTO: 'auto',
        ...spacing,
        FULL: '100%',
        SCREEN: '100vh',
      }),
      css: (name, value) => `${name} {\n  height: ${value};\n}`,
    },
    whitespace: {
      tokens: {
        NORMAL: 'normal',
        NO_WRAP: 'nowrap',
        PRE: 'pre',
        PRE_LINE: 'pre-line',
        PRE_WRAP: 'pre-wrap',
      },
      css: (name, value) => `${name} {\n  white-space: ${value};\n}`,
    },
    top: {
      tokens: ({ spacing }) => ({
        AUTO: 'auto',
        ...spacing,
      }),
      css: (name, value) => `${name} {\n  top: ${value};\n}`,
    },
    overflowWrap: {
      tokens: {
        NORMAL: 'normal',
        BREAK_WORD: 'break-word',
      },
      css: (name, value) => `${name} {\n  overflow-wrap: ${value};\n}`,
    },
    wordBreak: {
      tokens: {
        NORMAL: 'normal',
        BREAK_ALL: 'break-all',
      },
      css: (name, value) => `${name} {\n  word-break: ${value};\n}`,
    },
    textOverflow: {
      tokens: {
        CLIP: 'clip',
        ELLIPSIS: 'ellipsis',
      },
      css: (name, value) => `${name} {\n  text-overflow: ${value};white-space: nowrap;overflow: hidden;\n}`,
    },
    right: {
      tokens: ({ spacing }) => ({
        AUTO: 'auto',
        ...spacing,
      }),
      css: (name, value) => `${name} {\n  right: ${value};\n}`,
    },
    left: {
      tokens: ({ spacing }) => ({
        AUTO: 'auto',
        ...spacing,
      }),
      css: (name, value) => `${name} {\n  left: ${value};\n}`,
    },
    bottom: {
      tokens: ({ spacing }) => ({
        AUTO: 'auto',
        ...spacing,
      }),
      css: (name, value) => `${name} {\n  bottom: ${value};\n}`,
    },
    letterSpacing: {
      tokens: ({ letterSpacing }) => letterSpacing,
      css: (name, value) => `${name} {\n  letter-spacing: ${value};\n}`,
    },
    lineHeight: {
      tokens: ({ lineHeight }) => lineHeight,
      css: (name, value) => `${name} {\n  line-height: ${value};\n}`,
    },
    listStyleType: {
      tokens: {
        NONE: 'none',
        DISC: 'disc',
        DECIMAL: 'decimal',
      },
      css: (name, value) => `${name} {\n  list-style-type: ${value};\n}`,
    },
    listStylePosition: {
      tokens: {
        INSIDE: 'inside',
        OUTSIDE: 'outside',
      },
      css: (name, value) => `${name} {\n  list-style-position: ${value};\n}`,
    },
    float: {
      tokens: {
        RIGHT: 'right',
        LEFT: 'left',
        NONE: 'none',
      },
      css: (name, value) => `${name} {\n  float: ${value};\n}`,
    },
    alignContent: {
      tokens: {
        START: 'flex-start',
        CENTER: 'center',
        END: 'flex-end',
        BETWEEN: 'space-between',
        AROUND: 'space-around',
      },
      css: (name, value) => `${name} {\n  align-content: ${value};\n}`,
    },
    alignSelf: {
      tokens: {
        AUTO: 'auto',
        START: 'flex-start',
        CENTER: 'center',
        END: 'flex-end',
        STRETCH: 'stretch',
      },
      css: (name, value) => `${name} {\n  align-self: ${value};\n}`,
    },
    justifyContent: {
      tokens: {
        START: 'flex-start',
        CENTER: 'center',
        END: 'flex-end',
        BETWEEN: 'space-between',
        AROUND: 'space-around',
      },
      css: (name, value) => `${name} {\n  justify-content: ${value};\n}`,
    },
    margin: {
      tokens: ({ spacing }, { negative }) => ({
        ...spacing,
        ...negative(spacing),
        AUTO: 'auto',
      }),
      css: ['marginTop', 'marginRight', 'marginBottom', 'marginLeft'],
    },
    marginVertical: {
      tokens: ({ spacing }, { negative }) => ({
        ...spacing,
        ...negative(spacing),
        AUTO: 'auto',
      }),
      css: ['marginTop', 'marginBottom'],
    },
    marginHorizontal: {
      tokens: ({ spacing }, { negative }) => ({
        ...spacing,
        ...negative(spacing),
        AUTO: 'auto',
      }),
      css: ['marginLeft', 'marginRight'],
    },
    maxHeight: {
      tokens: {
        FULL: '100%',
        SCREEN: '100vh',
      },
      css: (name, value) => `${name} {\n  max-height: ${value};\n}`,
    },
    maxWidth: {
      tokens: {
        NONE: 'none',
        XS: '20rem',
        SM: '24rem',
        MD: '28rem',
        LG: '32rem',
        XL: '36rem',
        XL_2: '42rem',
        XL_3: '48rem',
        XL_4: '56rem',
        XL_6: '64rem',
        XL_7: '72rem',
        FULL: '100%',
      },
      css: (name, value) => `${name} {\n  max-width: ${value};\n}`,
    },
    minHeight: {
      tokens: {
        NONE: '0',
        FULL: '100%',
        SCREEN: '100vh',
      },
      css: (name, value) => `${name} {\n  min-height: ${value};\n}`,
    },
    minWidth: {
      tokens: {
        NONE: '0',
        FULL: '100%',
      },
      css: (name, value) => `${name} {\n  min-width: ${value};\n}`,
    },
    objectFit: {
      tokens: {
        CONTAIN: 'contain',
        COVER: 'cover',
        FILL: 'fill',
        NONE: 'none',
        SCALE_DOWN: 'scale-down',
      },
      css: (name, value) => `${name} {\n  object-fit: ${value};\n}`,
    },
    objectPosition: {
      tokens: {
        BOTTOM: 'bottom',
        CENTER: 'center',
        LEFT: 'left',
        LEFT_BOTTOM: 'left bottom',
        LEFT_TOP: 'left top',
        RIGHT: 'right',
        RIGHT_BOTTOM: 'right bottom',
        RIGHT_TOP: 'right top',
        TOP: 'top',
      },
      css: (name, value) => `${name} {\n  object-position: ${value};\n}`,
    },
    opacity: {
      tokens: ({ opacity }) => opacity,
      css: (name, value) => `${name} {\n  opacity: ${value};\n}`,
    },
    order: {
      tokens: {
        FIRST: '-9999',
        LAST: '9999',
        NONE: '0',
        ORDER_01: '1',
        ORDER_02: '2',
        ORDER_03: '3',
        ORDER_04: '4',
        ORDER_05: '5',
        ORDER_06: '6',
        ORDER_07: '7',
        ORDER_08: '8',
        ORDER_09: '9',
        ORDER_10: '10',
        ORDER_11: '11',
        ORDER_12: '12',
      },
      css: (name, value) => `${name} {\n  order: ${value};\n}`,
    },
    padding: {
      tokens: ({ spacing }) => spacing,
      css: ['paddingTop', 'paddingRight', 'paddingBottom', 'paddingLeft'],
    },
    paddingVertical: {
      tokens: ({ spacing }) => spacing,
      css: ['paddingTop', 'paddingBottom'],
    },
    paddingHorizontal: {
      tokens: ({ spacing }) => spacing,
      css: ['paddingLeft', 'paddingRight'],
    },
    paddingTop: {
      tokens: ({ spacing }) => spacing,
      css: (name, value) => `${name} {\n  padding-top: ${value};\n}`,
    },
    paddingRight: {
      tokens: ({ spacing }) => spacing,
      css: (name, value) => `${name} {\n  padding-right: ${value};\n}`,
    },
    paddingBottom: {
      tokens: ({ spacing }) => spacing,
      css: (name, value) => `${name} {\n  padding-bottom: ${value};\n}`,
    },
    paddingLeft: {
      tokens: ({ spacing }) => spacing,
      css: (name, value) => `${name} {\n  padding-left: ${value};\n}`,
    },
    marginTop: {
      tokens: ({ spacing }, { negative }) => ({
        ...spacing,
        ...negative(spacing),
        AUTO: 'auto;',
      }),
      css: (name, value) => `${name} {\n  margin-top: ${value};\n}`,
    },
    marginRight: {
      tokens: ({ spacing }, { negative }) => ({
        ...spacing,
        ...negative(spacing),
        AUTO: 'auto;',
      }),
      css: (name, value) => `${name} {\n  margin-right: ${value};\n}`,
    },
    marginBottom: {
      tokens: ({ spacing }, { negative }) => ({
        ...spacing,
        ...negative(spacing),
        AUTO: 'auto;',
      }),
      css: (name, value) => `${name} {\n  margin-bottom: ${value};\n}`,
    },
    marginLeft: {
      tokens: ({ spacing }, { negative }) => ({
        ...spacing,
        ...negative(spacing),
        AUTO: 'auto;',
      }),
      css: (name, value) => `${name} {\n  margin-left: ${value};\n}`,
    },
    stroke: {
      tokens: {
        CURRENT: 'currentColor',
      },
      css: (name, value) => `${name} {\n  stroke: ${value};\n}`,
    },
    width: {
      tokens: ({ spacing }) => ({
        auto: 'auto',
        ...spacing,
        WIDTH_1_2: '50%',
        WIDTH_1_3: '33.333333%',
        WIDTH_2_3: '66.666667%',
        WIDTH_1_4: '25%',
        WIDTH_2_4: '50%',
        WIDTH_3_4: '75%',
        WIDTH_1_5: '20%',
        WIDTH_2_5: '40%',
        WIDTH_3_5: '60%',
        WIDTH_4_5: '80%',
        WIDTH_1_6: '16.666667%',
        WIDTH_2_6: '33.333333%',
        WIDTH_3_6: '50%',
        WIDTH_4_6: '66.666667%',
        WIDTH_5_6: '83.333333%',
        WIDTH_1_12: '8.333333%',
        WIDTH_2_12: '16.666667%',
        WIDTH_3_12: '25%',
        WIDTH_4_12: '33.333333%',
        WIDTH_5_12: '41.666667%',
        WIDTH_6_12: '50%',
        WIDTH_7_12: '58.333333%',
        WIDTH_8_12: '66.666667%',
        WIDTH_9_12: '75%',
        WIDTH_10_12: '83.333333%',
        WIDTH_11_12: '91.666667%',
        FULL: '100%',
        SCREEN: '100vw',
      }),
      css: (name, value) => `${name} {\n  width: ${value};\n}`,
    },
    zIndex: {
      tokens: {
        AUTO: 'auto',
        NONE: '0',
        Z_10: '10',
        Z_20: '20',
        Z_30: '30',
        Z_40: '40',
        Z_50: '50',
      },
      css: (name, value) => `${name} {\n  z-index: ${value};\n}`,
    },
    gap: {
      tokens: ({ spacing }) => spacing,
      css: (name, value) => `${name} {\n  gap: ${value};\n}`,
    },
    gridTemplateColumns: {
      tokens: {
        NONE: 'none',
        COLUMNS_01: 'repeat(1, minmax(0, 1fr))',
        COLUMNS_02: 'repeat(2, minmax(0, 1fr))',
        COLUMNS_03: 'repeat(3, minmax(0, 1fr))',
        COLUMNS_04: 'repeat(4, minmax(0, 1fr))',
        COLUMNS_05: 'repeat(5, minmax(0, 1fr))',
        COLUMNS_06: 'repeat(6, minmax(0, 1fr))',
        COLUMNS_07: 'repeat(7, minmax(0, 1fr))',
        COLUMNS_08: 'repeat(8, minmax(0, 1fr))',
        COLUMNS_09: 'repeat(9, minmax(0, 1fr))',
        COLUMNS_10: 'repeat(10, minmax(0, 1fr))',
        COLUMNS11: 'repeat(11, minmax(0, 1fr))',
        COLUMNS12: 'repeat(12, minmax(0, 1fr))',
      },
      css: (name, value) => `${name} {\n  grid-template-columns: ${value};\n}`,
    },
    gridColumn: {
      tokens: {
        AUTO: 'auto',
        SPAN_01: 'span 1 / span 1',
        SPAN_02: 'span 2 / span 2',
        SPAN_03: 'span 3 / span 3',
        SPAN_04: 'span 4 / span 4',
        SPAN_05: 'span 5 / span 5',
        SPAN_06: 'span 6 / span 6',
        SPAN_07: 'span 7 / span 7',
        SPAN_08: 'span 8 / span 8',
        SPAN_09: 'span 9 / span 9',
        SPAN_10: 'span 10 / span 10',
        SPAN_11: 'span 11 / span 11',
        SPAN_12: 'span 12 / span 12',
      },
      css: (name, value) => `${name} {\n  grid-column: ${value};\n}`,
    },
    gridColumnStart: {
      tokens: {
        AUTO: 'auto',
        START_01: '1',
        START_02: '2',
        START_03: '3',
        START_04: '4',
        START_05: '5',
        START_06: '6',
        START_07: '7',
        START_08: '8',
        START_09: '9',
        START_10: '10',
        START_11: '11',
        START_12: '12',
        START_13: '13',
      },
      css: (name, value) => `${name} {\n  grid-column-start: ${value};\n}`,
    },
    gridColumnEnd: {
      tokens: {
        AUTO: 'auto',
        END_01: '1',
        END_02: '2',
        END_03: '3',
        END_04: '4',
        END_05: '5',
        END_06: '6',
        END_07: '7',
        END_08: '8',
        END_09: '9',
        END_10: '10',
        END_11: '11',
        END_12: '12',
        END_13: '13',
      },
      css: (name, value) => `${name} {\n  grid-column-end: ${value};\n}`,
    },
    transformOrigin: {
      tokens: {
        CENTER: 'center',
        TOP: 'top',
        TOP_RIGHT: 'top right',
        RIGHT: 'right',
        BOTTOM_RIGHT: 'bottom right',
        BOTTOM: 'bottom',
        BOTTOM_LEFT: 'bottom left',
        LEFT: 'left',
        TOP_LEFT: 'top left',
      },
      css: (name, value) => `${name} {\n  transform-origin: ${value};\n}`,
    },
    scale: {
      tokens: {
        NONE: '0',
        SCALE_050: '.5',
        SCAØE_075: '.75',
        SCALE_090: '.9',
        SCALE_095: '.95',
        SCALE_100: '1',
        SCALE_105: '1.05',
        SCALE_110: '1.1',
        SCALE_125: '1.25',
        SCALE_150: '1.5',
      },
      css: (name, value) => `${name} {\n  transform:scale(${value});\n}`,
    },
    rotate: {
      tokens: {
        DEG_NEG_180: '-180deg',
        DEG_NEG_90: '-90deg',
        DEG_NEG_45: '-45deg',
        NONE: '0',
        DEG_45: '45deg',
        DEG_90: '90deg',
        DEG_180: '180deg',
      },
      css: (name, value) => `${name} {\n  transform:rotate(${value});\n}`,
    },
    translate: {
      tokens: ({ spacing }, { negative }) => ({
        ...spacing,
        ...negative(spacing),
        NEG_FULL: '-100%',
        NEG_HALF: '-50%',
        HALF: '50%',
        FULL: '100%',
      }),
      css: (name, value) => `${name} {\n  transform:translate(${value});\n}`,
    },
    transitionProperty: {
      tokens: {
        NONE: 'none',
        ALL: 'all',
        DEFAULT: 'background-color, border-color, color, opacity, transform',
        COLORS: 'background-color, border-color, color',
        OPACITY: 'opacity',
        TRANSFORM: 'transform',
      },
      css: (name, value) => `${name} {\n  transition-property: ${value};\n}`,
    },
    transitionTimingFunction: {
      tokens: ({ timingFunctions }) => timingFunctions,
      css: (name, value) => `${name} {\n  transition-timing-function: ${value};\n}`,
    },
    transitionDuration: {
      tokens: ({ durations }) => durations,
      css: (name, value) => `${name} {\n  transition-duration: ${value};\n}`,
    },
    utils: {
      tokens: {
        CLEARFIX: '::after{\n  content: "";display: table;clear: both;\n}',
        SCREEN_REDER:
          '{\n  position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0,0,0,0);white-space:nowrap;border-width:0;\n}',
        NOT_SCREEN_READER:
          '{\n  position:static;width:auto;height:auto;padding:0;margin:0;overflow:visible;clip:auto;white-space:normal;\n}',
      },
      css: (name, value) => `${name}${value}`,
    },
  },
};
